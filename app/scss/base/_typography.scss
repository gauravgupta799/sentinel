@use '../abstract/mixins' as *;
@use '../abstract/functions' as *;
@use '../abstract/fonts' as *;
@use '../abstract/colors' as *;

// ===== base and responsive font size  ========

// Breakpoint values for min-width operators.
$breakpoints: (
  sm: em(576),
  md: em(768),
  lg: em(992),
  xl: em(1400),
  xxl:em(1600),
);

// Null is mobile, no breakpoint.
$p-font-sizes: (
  null:(rem(16), rem(28)), // Font sizes and line height 
  sm: (rem(16), rem(28)),
  md: (rem(16), rem(32)),
  lg: (rem(18), rem(36)),
  xl: (rem(18), rem(36)),
  xxl:(rem(20), rem(44)), 
);
// $p-font-sizes: (
//   null:(rem(16), rem(32)), // Font sizes and line height 
//   sm: (rem(16), rem(32)),
//   md: (rem(18), rem(36)),
//   lg: (rem(18), rem(36)),
//   xl: (rem(18), rem(36)),
//   xxl:(rem(24), rem(48)), 
// );

$sec-para-sizes: (
  null:(rem(18), rem(32)), // Font sizes and line height 
  sm: (rem(18), rem(32)),
  md: (rem(18), rem(32)),
  lg: (rem(20), rem(36)),
  xl: (rem(20), rem(36)),
  xxl:(rem(24), rem(44)), 
);

$h1-font-sizes: (
  null:(rem(42), rem(46)),   
  sm: (rem(44), rem(52)),
  md: (rem(48), rem(56)),
  lg: (rem(52), rem(70)),
  xl: (rem(52), rem(70)),
  xxl:(rem(72), rem(84)),
);

$h2-font-sizes:(
  null:(rem(36), rem(42)), 
  sm:(rem(40), rem(48)),
  md:(rem(44), rem(52)),
  lg:(rem(48), rem(54)),
  xl:(rem(48), rem(58)),
  xxl:(rem(60), rem(74)),
);

$h3-font-sizes: (
  null:(rem(28), rem(36)), 
  sm:(rem(32), rem(42)),
  md:(rem(36), rem(48)),
  lg:(rem(40), rem(44)),
  xl:(rem(40), rem(44)),
  xxl:(rem(48), rem(64)),
);

$h4-font-sizes: (
  null:(rem(24), rem(34)), 
  sm:(rem(28), rem(40)),
  md:(rem(30), rem(44)),
  lg:(rem(32), rem(48)),
  xl:(rem(32), rem(48)),
  xxl:(rem(40), rem(58)),
);

$h5-font-sizes: (
  null:(rem(18), rem(30)), 
  sm:(rem(20), rem(34)),
  md:(rem(24), rem(40)),
  lg:(rem(28), rem(54)),
  xl:(rem(28), rem(54)),
  xxl:(rem(32), rem(52)),
); 

$h6-font-sizes: (
  null:(rem(18), rem(32)),
  sm:(rem(20), rem(36)),
  md:(rem(22), rem(40)),
  lg:(rem(24), rem(44)),
  xl:(rem(24), rem(44)),
  xxl:(rem(28), rem(52)),
); 

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map{
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == "list" {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }
  @else {
    font-size: $fs-font-size;
  }
}


// ======== adding both font size and font-family mixins====
h1{
    @include font-size($h1-font-sizes);
}

h2{
    @include font-size($h2-font-sizes);
}

h3{
    @include font-size($h3-font-sizes);
}

h4{
    @include font-size($h4-font-sizes);
}

h5{
  @include font-size($h5-font-sizes);
}

h6{
  @include font-size($h6-font-sizes);
}

h1, h2, h3, h4, h5, h6{
  // @include font-heading;
}

p, ul, ol, body{
    @include font-size($p-font-sizes);
    // @include font-body;
}

.sec__para{
  @include font-size($sec-para-sizes);
}